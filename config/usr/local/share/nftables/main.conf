define if_brvirt = "brvirt"
define if_jool_internet = "jool_internet"
define if_jool_parents = "jool_parents"
define if_lan = "lan"
define if_lan_inet = "lan_inet"
define if_lan_inet_vpn0 = "lan_inet_vpn0"
define if_lan_mgmt = "lan_mgmt"
define if_lan_void = "lan_void"
define if_modem = "modem"
define if_wan = "ppp0"
define if_wg_main = "wg0"
define if_wg_parents = "wg1"
define if_lanish = { $if_lan, $if_wg_main }

define if_adguard = "veth_adguard"
define if_named = "veth_named"
define if_scapydns = "veth_scapydns"

define veths_with_inet = {
	$if_adguard,
	$if_named
}

define mark_allow_inet = 0x1
define mark_allow_lan = 0x2
define mark_allow_parents = 0x4
define mark_allow_dns = 0x8

define addr_main_dns = fd33:1491:4cfa:1:ca31:97ff:fe66:782b
define addr_main_dns_v4 = 192.168.40.10
define addr_homeserver_dns = fd33:1491:4cfa:f000::8000
define addr_vpn0_dns = fd33:1491:4cfa:f000::9000
define addr_parents_dns = 64:ff9b:1::c0a8:b201
define addr_romshare = 10.92.1.201

table inet router
table bridge router_brfilter
delete table inet router
delete table bridge router_brfilter

table inet router {
	chain input_allow_icmp {
		ip protocol icmp counter accept comment "Accept all ICMP types"
		ip6 nexthdr icmpv6 counter accept comment "Accept all ICMP types"
	}

	chain input_syn_flood {
		limit rate 25/second burst 50 packets return comment "Accept SYN packets below rate-limit"
		drop comment "Drop excess packets"
	}

	chain accept_dhcp {
		udp dport 67 accept comment "DHCPv4"
	}

	chain input_lanish {
		jump input_allow_icmp
		tcp dport 22 accept comment "SSH"
		jump accept_dhcp
	}

	chain input_lan_mgmt {
		jump input_allow_icmp
	}

	chain input_lan_void {
		jump input_allow_icmp
		jump accept_dhcp
	}

	chain input_lan_inet {
		jump input_allow_icmp
		jump accept_dhcp
	}

	chain input_lan_inet_vpn0 {
		jump input_allow_icmp
		jump accept_dhcp
	}

	chain input_modem {
		jump input_allow_icmp
	}

	chain input_wan {
		udp dport 443 accept comment "main wireguard"
		udp dport 51394 accept comment "parents wireguard"
		ip6 saddr fe80::/10 jump input_allow_icmp
		ip6 saddr fe80::/10 udp sport 547 udp dport 546 accept comment "DHCPv6"
		counter drop
	}

	chain input_jool_common {
		jump input_allow_icmp
	}

	chain input_brvirt {
		jump input_allow_icmp
	}

	chain input {
		type filter hook input priority filter; policy drop;

		ct state invalid drop
		ct state { established, related } accept
		tcp flags syn / fin,syn,rst,ack jump input_syn_flood comment "Rate limit TCP syn packets"

		iifname lo accept
		iifname $if_lanish jump input_lanish
		iifname $if_lan_mgmt jump input_lan_mgmt
		iifname $if_lan_void jump input_lan_void
		iifname $if_lan_inet jump input_lan_inet
		iifname $if_lan_inet_vpn0 jump input_lan_inet_vpn0
		iifname $if_modem jump input_modem
		iifname $if_wan jump input_wan
		iifname { $if_jool_internet, $if_jool_parents } jump input_jool_common
		iifname $if_brvirt jump input_brvirt
		ip daddr 255.255.255.255 drop

		log flags all prefix "dropped input: "
	}

	chain allow_internet {
		oifname $if_wan accept
		ip6 daddr 64:ff9b::ffff:ffff counter drop
		iifname != $if_jool_internet oifname $if_jool_internet ip6 daddr 64:ff9b::/96 accept
	}

	chain allow_other_lans {
		oifname { $if_lan_inet, $if_lan_inet_vpn0, $if_lan_void, $if_wg_parents, $if_jool_parents } accept
		iifname != $if_lan oifname $if_lan accept
		iifname != $if_wg_main oifname $if_wg_main accept
	}

	chain allow_dns {
		ip6 daddr $addr_main_dns accept
		ip daddr $addr_main_dns_v4 accept
	}

	chain forward {
		type filter hook forward priority filter; policy drop;

		oifname $if_wan meta l4proto { tcp, udp } th dport 53 meta mark & $mark_allow_dns != $mark_allow_dns counter drop

		ct state invalid drop
		ct state { established, related } accept

		iifname { $if_lanish, $if_jool_internet, $if_lan_inet, $if_lan_inet_vpn0 } jump allow_internet
		iifname $if_brvirt meta mark & $mark_allow_inet == $mark_allow_inet jump allow_internet
		iifname $if_lanish jump allow_other_lans
		iifname $if_jool_parents oifname $if_wg_parents accept

		# NOTE: While some brvirt containers may need access, they can do so directly
		#       via the bridge forward.
		iifname { $if_lanish, $if_lan_inet, $if_lan_inet_vpn0 } oifname $if_brvirt jump allow_dns

		# The actual vpn0 access for inet_vpn0
		iifname $if_lan_inet_vpn0 oifname $if_lan ip6 daddr fd33:1491:4cfa:f069::/64 accept

		# lan access for some containers.
		iifname $if_brvirt oifname $if_lan meta mark & $mark_allow_lan == $mark_allow_lan accept

		iifname $if_brvirt oifname { $if_wg_parents, $if_jool_parents } mark & $mark_allow_parents == $mark_allow_parents accept

		iifname $if_lan_void oifname { $if_lan } ip daddr $addr_romshare accept

		log flags all prefix "dropped forward: "
	}

	chain mangle_forward {
		type filter hook forward priority mangle; policy accept;

		iifname $if_wan tcp flags syn tcp option maxseg size set rt mtu comment "clamp TCP MSS to Path MTU"
		oifname $if_wan tcp flags syn tcp option maxseg size set rt mtu comment "clamp TCP MSS to Path MTU"
	}

	chain output {
		type filter hook output priority filter; policy accept;

		ct state invalid drop
		ct state { established, related } accept
	}

	chain translate_wg0_prefix {
	}

	chain srcnat {
		type nat hook postrouting priority srcnat; policy accept;
		oifname { $if_wan, $if_wg_parents } meta nfproto ipv4 masquerade
		oifname $if_wan jump translate_wg0_prefix
	}
}

table bridge router_brfilter {
	chain input_allow_icmp {
		ip protocol icmp counter accept comment "Accept all ICMP types"
		ip6 nexthdr icmpv6 counter accept comment "Accept all ICMP types"
	}

	chain input {
		type filter hook input priority filter; policy accept;
		iifname $veths_with_inet meta mark set mark | $mark_allow_inet;
		iifname $if_named meta mark set mark | $mark_allow_dns;
		iifname $if_named ip6 daddr {
			$addr_homeserver_dns,
			$addr_vpn0_dns
		} meta mark set mark | $mark_allow_lan;
		iifname $if_scapydns ip6 daddr $addr_parents_dns meta mark set mark | $mark_allow_parents
		iifname $if_scapydns ip6 daddr $addr_homeserver_dns meta mark set mark | $mark_allow_lan
	}

	chain forward {
		type filter hook forward priority filter; policy drop;

		ct state { established, related } accept

		ip protocol icmp counter accept comment "accept all ICMP types"
		meta l4proto ipv6-icmp counter accept comment "accept all ICMP types"
		ether type arp accept

		iifname $if_adguard oifname $if_named accept
		iifname $if_named oifname $if_scapydns accept

		log flags all prefix "dropped forward(bridge): "
	}
}
