define if_brvirt = "brvirt"
define if_jool_internet = "jool_internet"
define if_jool_parents = "jool_parents"
define if_lan = "lan"
define if_lan_inet = "lan_inet"
define if_lan_inet_vpn0 = "lan_inet_vpn0"
define if_lan_mgmt = "lan_mgmt"
define if_lan_void = "lan_void"
define if_modem = "modem"
define if_wan = "ppp0"
define if_wg_main = "wg0"
define if_wg_parents = "wg1"

define if_bind_exporter = "veth_bindex"
define if_named = "veth_named"
define if_scapydns = "veth_scapydns"

define veths_with_inet = {
	$if_named
}

define mark_allow_inet = 0x1
define mark_allow_lan = 0x2
define mark_allow_parents = 0x4
define mark_forwarded = 0x8
define mark_masq = 0x16

define addr_bind_exporter = fd33:1491:4cfa:1:b418:a5ff:fee5:9670
define addr_homeserver_dns = fd33:1491:4cfa:f000::8000
define addr_vpn0_dns = fd33:1491:4cfa:f000::9000
define addr_parents_dns = 64:ff9b:1::c0a8:b201
define addr_romshare = 10.92.1.201
define addr_mediashare = fd33:1491:4cfa:f000::8007

define port_wireguard_main = 443
define port_wireguard_parents = 51394

include "/usr/local/share/nftables/variables.conf"

table inet router
table bridge router_brfilter
delete table inet router
delete table bridge router_brfilter

table inet router {
	chain input_allow_icmp {
		ip protocol icmp counter accept comment "Accept all ICMP types"
		ip6 nexthdr icmpv6 counter accept comment "Accept all ICMP types"
	}

	chain input_syn_flood {
		limit rate 25/second burst 50 packets return comment "Accept SYN packets below rate-limit"
		drop comment "Drop excess packets"
	}

	chain accept_dhcp {
		udp dport 67 accept comment "DHCPv4"
	}

	chain input_lanish {
		jump input_allow_icmp
		tcp dport 22 accept comment "SSH"
		jump accept_dhcp
	}

	chain input_lan_mgmt {
		jump input_allow_icmp
		tcp dport 9100 accept comment "node exporter"
	}

	chain input_lan_void {
		jump input_allow_icmp
		jump accept_dhcp
	}

	chain input_lan_inet {
		jump input_allow_icmp
		jump accept_dhcp
	}

	chain input_lan_inet_vpn0 {
		jump input_allow_icmp
		jump accept_dhcp
	}

	chain input_modem {
		jump input_allow_icmp
	}

	chain input_wan {
		udp dport {
			$port_wireguard_main,
			$port_wireguard_parents,
		} accept

		ip6 saddr fe80::/10 jump input_allow_icmp
		ip6 saddr fe80::/10 udp sport 547 udp dport 546 accept comment "DHCPv6"
		counter drop
	}

	chain input_jool_common {
		jump input_allow_icmp
	}

	chain input_brvirt {
		jump input_allow_icmp
	}

	chain input {
		type filter hook input priority filter; policy drop;

		ct state vmap { established : accept, related : accept, invalid : drop }

		tcp flags syn / fin,syn,rst,ack jump input_syn_flood comment "Rate limit TCP syn packets"

		iifname vmap {
			lo: accept,
			$if_brvirt: jump input_brvirt,
			$if_jool_internet: jump input_jool_common,
			$if_jool_parents: jump input_jool_common,
			$if_lan: jump input_lanish,
			$if_lan_inet: jump input_lan_inet,
			$if_lan_inet_vpn0: jump input_lan_inet_vpn0,
			$if_lan_mgmt: jump input_lan_mgmt,
			$if_lan_void: jump input_lan_void,
			$if_modem: jump input_modem,
			$if_wan: jump input_wan,
			$if_wg_main: jump input_lanish,
		}

		ip daddr 255.255.255.255 drop

		log flags all prefix "dropped input: "
	}

	chain allow_internet {
		oifname $if_wan ether saddr $macs_no_internet drop
		oifname $if_wan accept
		ip6 daddr 64:ff9b::ffff:ffff counter drop
		iifname != $if_jool_internet oifname $if_jool_internet ip6 daddr 64:ff9b::/96 accept
	}

	chain forward_brvirt {
		meta mark & $mark_allow_inet == $mark_allow_inet jump allow_internet

		# lan access for some containers.
		oifname $if_lan meta mark & $mark_allow_lan == $mark_allow_lan accept

		oifname { $if_wg_parents, $if_jool_parents } mark & $mark_allow_parents == $mark_allow_parents accept
	}

	chain forward_jool_internet {
		jump allow_internet
	}

	chain forward_jool_parents {
		oifname $if_wg_parents accept
	}

	chain forward_lan {
		jump allow_internet
		oifname {
			$if_brvirt,
			$if_jool_parents,
			$if_lan_inet,
			$if_lan_inet_vpn0,
			$if_lan_void,
			$if_wg_main,
			$if_wg_parents,
		} accept

		# Some devices ignore our classless-static-route.
		oifname $if_lan ip daddr 10.92.1.0/16 meta mark set mark | $mark_masq counter accept
	}

	chain forward_lan_inet {
		jump allow_internet
		oifname $if_brvirt accept
		oifname $if_lan ip6 daddr $addr_mediashare accept
	}

	chain forward_lan_inet_vpn0 {
		jump allow_internet
		oifname $if_brvirt accept
		# The actual vpn0 access for inet_vpn0
		oifname $if_lan ip6 daddr fd33:1491:4cfa:f069::/64 accept
	}

	chain forward_lan_mgmt {
		oifname $if_lan ip daddr 10.92.1.202 meta mark set mark | $mark_masq accept comment "unifi network server"

		# Stop DNS log spam.
		udp dport 53 drop

	}

	chain forward_lan_void {
		oifname if_lan ip daddr $addr_romshare accept
	}

	chain forward_wan {
		counter drop
	}

	chain forward_wg_main {
		jump allow_internet
		oifname {
			$if_brvirt,
			$if_lan,
			$if_lan_inet,
			$if_lan_inet_vpn0,
			$if_lan_void,
			$if_wg_parents,
			$if_jool_parents,
		} accept
	}

	chain forward {
		type filter hook forward priority filter; policy drop;

		ct state vmap { established : accept, related : accept, invalid : drop }
		ct status dnat accept

		# Mark forwards to the bridge, so we can filter based on the destination
		# interface within the bridge output chain.
		oifname $if_brvirt meta mark set mark | $mark_forwarded

		iifname vmap {
			$if_brvirt: jump forward_brvirt,
			$if_jool_internet: jump forward_jool_internet,
			$if_jool_parents: jump forward_jool_parents,
			$if_lan: jump forward_lan,
			$if_lan_inet: jump forward_lan_inet,
			$if_lan_inet_vpn0: jump forward_lan_inet_vpn0,
			$if_lan_mgmt: jump forward_lan_mgmt,
			$if_lan_void: jump forward_lan_void,
			$if_wan: jump forward_wan,
			$if_wg_main: jump forward_wg_main,
		}

		log flags all prefix "dropped forward: "
	}

	chain mangle_forward {
		type filter hook forward priority mangle; policy accept;

		iifname { $if_wan, $if_wg_main } tcp flags syn tcp option maxseg size set rt mtu comment "clamp TCP MSS to Path MTU"
		oifname { $if_wan, $if_wg_main } tcp flags syn tcp option maxseg size set rt mtu comment "clamp TCP MSS to Path MTU"
	}

	chain output {
		type filter hook output priority filter; policy accept;

		ct state vmap { established : accept, related : accept, invalid : drop }
	}

	chain translate_wg0_prefix {
	}

	chain nat {
		type nat hook prerouting priority -100;

		iifname $if_lan_mgmt tcp dport 9119 dnat ip6 to $addr_bind_exporter
	}

	chain srcnat_lan {
		mark & $mark_masq == $mark_masq meta nfproto ipv4 masquerade
	}

	chain srcnat_wan {
		meta nfproto ipv4 masquerade
		jump translate_wg0_prefix
	}

	chain srcnat_wg_parents {
		meta nfproto ipv4 masquerade
	}

	chain srcnat {
		type nat hook postrouting priority srcnat; policy accept;
		oifname vmap {
			$if_lan: jump srcnat_lan,
			$if_wan: jump srcnat_wan,
			$if_wg_parents: jump srcnat_wg_parents,
		}
	}
}

table bridge router_brfilter {
	chain input_allow_icmp {
		ip protocol icmp counter accept comment "Accept all ICMP types"
		ip6 nexthdr icmpv6 counter accept comment "Accept all ICMP types"
	}

	chain input {
		type filter hook input priority filter; policy accept;
		iifname $veths_with_inet meta mark set mark | $mark_allow_inet;
		iifname $if_named ip6 daddr {
			$addr_homeserver_dns,
			$addr_vpn0_dns
		} meta mark set mark | $mark_allow_lan;
		iifname $if_scapydns ip6 daddr $addr_parents_dns meta mark set mark | $mark_allow_parents
		iifname $if_scapydns ip6 daddr $addr_homeserver_dns meta mark set mark | $mark_allow_lan
	}

	chain forward_named {
		oifname $if_scapydns accept
	}

	chain forward_bind_exporter {
		oifname $if_named tcp dport 8053 accept
	}

	chain forward {
		type filter hook forward priority filter; policy drop;

		ct state { established, related } accept

		meta l4proto { icmp, ipv6-icmp } counter accept comment "accept all ICMP types"
		ether type arp accept

		iifname vmap {
			$if_named: jump forward_named,
			$if_bind_exporter: jump forward_bind_exporter,
		}

		log flags all prefix "dropped forward(bridge): "
	}

	chain output_named {
		meta l4proto . th dport {
			# DNS
			udp . 53,
			tcp . 53,
			# DNS over HTTPS
			tcp . 443,
			# DNS over TLS
			tcp . 853,
		} accept
	}

	chain output {
		type filter hook output priority 0; policy drop;

		meta mark & $mark_forwarded != $mark_forwarded accept comment "allow traffic from this host"
		oifname $if_named jump output_named
		log flags all prefix "dropped output(bridge): "
	}
}
