#!/bin/bash

set -euo pipefail

log() {
	echo "====>" "$@" >&2
}

update_image() {
	local name="$1"
	local tag="localhost/$name:latest"
	local containerfile="/usr/local/share/container-image-builder/Containerfile.$name"

	local versions_old
	versions_old=$(podman run --rm --net host "$tag" cat /etc/software-versions || true)

	local versions_latest
	versions_latest=$(podman run --rm --net host "$tag" /usr/local/bin/latest-versions || true)
	if [ -n "$versions_latest" ] && [ "$versions_latest" = "$versions_old" ]; then
		log "latest-versions already reports: $versions_latest"
		return 0
	fi

	if ! podman build \
		--no-cache \
		--pull=always \
		--iidfile="/tmp/iid.$name" \
		--net=host \
		-f "$containerfile" \
		/usr/local/share/container-image-builder; then
		return 1
	fi

	local iid_new
	iid_new=$(cat "/tmp/iid.$name")

	local versions_new
	versions_new=$(podman run --rm --net host "$iid_new" cat /etc/software-versions)

	if [ "$versions_old" != "$versions_new" ]; then
		log "update image"
		podman tag "$iid_new" "$tag"
	else
		log "no update needed"
	fi

	return 0
}

failed=0

while IFS= read -rd '' path; do
	filename=$(basename "$path")
	extension="${filename##*.}"

	log "Build $extension"

	if ! update_image "$extension"; then
		log "failed to build $extension"
		failed=1
	fi
done < <(find /usr/local/share/container-image-builder -name 'Containerfile.*' -mindepth 1 -maxdepth 1 -print0)

if [ $failed -ne 0 ]; then
	log "some containers failed to update"
	exit 1
fi
